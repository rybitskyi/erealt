// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package biz.rageintegro.erealt.jsf;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.ResourceBundle;

@ManagedBean
@RequestScoped
public class ApplicationBean {

    @PostConstruct
    public void init() {
    }

    public String getAppName() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        String messageBundleName = facesContext.getApplication().getMessageBundle();
        ResourceBundle messageBundle = ResourceBundle.getBundle(messageBundleName);
        return messageBundle.getString("global_simpletitle");
    }

    public String getOptionsMenuLabel() {
        if (isRegisteredUser()) {
            return SecurityContextHolder.getContext().getAuthentication().getName();
        } else {
            FacesContext facesContext = FacesContext.getCurrentInstance();
            String messageBundleName = facesContext.getApplication().getMessageBundle();
            ResourceBundle messageBundle = ResourceBundle.getBundle(messageBundleName);
            return messageBundle.getString("member_cabinet_title");
        }
    }

    private boolean isRegisteredUser() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null) {
            return false;
        }
        List<GrantedAuthority> allowedRoles = AuthorityUtils.createAuthorityList("ROLE_USER", "ROLE_ADMIN");
        Collection<GrantedAuthority> auths = new ArrayList<GrantedAuthority>(auth.getAuthorities());
        auths.retainAll(allowedRoles);
        return auths.size() > 0;
    }
}
